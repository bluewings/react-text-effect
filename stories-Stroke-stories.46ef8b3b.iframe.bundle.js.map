{"version":3,"file":"stories-Stroke-stories.46ef8b3b.iframe.bundle.js","mappings":";;;AAkCA;AACA;;AAEA;AACA;AACA;;AAEA;AAKA","sources":["webpack://react-text-fx/./src/components/Stroke/Stroke.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\n// import cx from 'classnames';\nimport React, { useMemo, useRef } from 'react';\nimport useTextStyle from '../../hooks/useTextStyle';\nimport styles from './Stroke.module.scss';\n\ninterface IStrokeProps {\n  text: string;\n  maxFontSize?: number;\n  shadow?: boolean;\n  shadowColor?: string;\n  fillColor?: string;\n}\n\n// console.log(css);\n\nconst DEFAULT_SHADOW_COLOR = '#5fc6fa';\n\n// see: https://codepen.io/markmead/pen/YjQKeZ\nfunction Stroke({ text, maxFontSize, shadow, fillColor, shadowColor = DEFAULT_SHADOW_COLOR }: IStrokeProps) {\n  const ref = useRef(null);\n  const textSize = useTextStyle<HTMLDivElement>(ref, text ?? '', { maxFontSize });\n\n  // const {fontSuze}\n\n  const { fontSize } = textSize;\n\n  const a = useMemo(() => {\n    const shadowOffset = fontSize / 30;\n    const strokeWidth = fontSize / 90;\n\n    // @include stroke-width(2px);\n\n    return css`\n      .${styles.shadow} {\n        text-shadow: ${shadowOffset}px ${shadowOffset}px ${shadowColor};\n      }\n      .${styles.stroke} {\n        -webkit-text-stroke-width: ${strokeWidth}px;\n        -moz-text-stroke-width: ${strokeWidth}px;\n      }\n      ${fillColor\n        ? `.${styles.stroke} {\n          color: ${fillColor}\n      }`\n        : ''}\n    `;\n  }, [fontSize, fillColor, shadowColor]);\n\n  return (\n    <div ref={ref} className={cx(styles.container, a)}>\n      <span className={cx(styles.stroke, shadow && styles.shadow)} style={textSize}>\n        {text}\n      </span>\n    </div>\n  );\n}\n\nexport default Stroke;\n"],"names":[],"sourceRoot":""}